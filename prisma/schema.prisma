// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ─────────────────────────────────────────────────────────────────────────────
// Admin & User (Auth) Models
// ─────────────────────────────────────────────────────────────────────────────
model Admin {
  id       String @id @default(uuid())
  username String @unique
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String? // null if using Clerk
  name            String?
  username        String?   @unique
  phone           String?   @unique
  profileImage    String? // Clerk stores image
  clerkUserId     String?   @unique
  clerkCreatedAt  DateTime?
  clerkUpdatedAt  DateTime?
  lastSignInAt    DateTime?
  isEmailVerified Boolean?  @default(false)
  phoneVerified   Boolean?  @default(false)
  role            UserRole  @default(USER)
  tenantId        String? // Optional for super admins
  tenant          Tenant?   @relation(fields: [tenantId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([tenantId])
}

enum UserRole {
  ADMIN
  STAFF
  USER
}

enum UserSex {
  MALE
  FEMALE
}

// ─────────────────────────────────────────────────────────────────────────────
// Tenant (School) for multi-tenancy
// ─────────────────────────────────────────────────────────────────────────────
model Tenant {
  id           String   @id @default(uuid())
  name         String
  code         String   @unique
  contact      String
  address      String
  email        String
  description  String?      // NEW
  subscription String?      // NEW (or consider enum)
  status       String?      // NEW (or consider enum)
  domain       String?      // NEW
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  users        User[]
  zones        Zone[]
  cameras      Camera[]
  dvrs         Dvr[]
  sensors      Sensor[]
  aiEvents     AiEvent[]
  gateEvents   GateEvent[]
  visitors     Visitor[]
  security     Security[]
  aiModels     AiModel[] @relation("TenantToAiModel")
}


// ─────────────────────────────────────────────────────────────────────────────
// Zones (e.g., buildings, floors, gates)
// ─────────────────────────────────────────────────────────────────────────────
model Zone {
  id          Int     @id @default(autoincrement())
  tenantId    String
  name        String
  description String?
  parentId    Int?

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  parent   Zone?  @relation("ZoneParent", fields: [parentId], references: [id])
  children Zone[] @relation("ZoneParent")

  cameras    Camera[]
  dvrs       Dvr[]
  sensors    Sensor[]
  gateEvents GateEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─────────────────────────────────────────────────────────────────────────────
// Cameras
// ─────────────────────────────────────────────────────────────────────────────
model Camera {
  id       Int    @id @default(autoincrement())
  tenantId String
  zoneId   Int
  dvrId    Int? // Optional link to DVR/NVR

  name       String
  ipAddress  String
  macAddress String
  model      String
  firmware   String
  location   String
  isActive   Boolean @default(true)

  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  zone     Zone      @relation(fields: [zoneId], references: [id])
  dvr      Dvr?      @relation(fields: [dvrId], references: [id])
  aiEvents AiEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String? // Clerk userId
  updatedBy String?
}

// ─────────────────────────────────────────────────────────────────────────────
// DVR / NVR Devices
// ─────────────────────────────────────────────────────────────────────────────
model Dvr {
  id       Int    @id @default(autoincrement())
  tenantId String
  zoneId   Int

  name              String
  ipAddress         String
  macAddress        String
  model             String
  firmware          String
  storageCapacityGb Int
  isActive          Boolean @default(true)

  tenant  Tenant   @relation(fields: [tenantId], references: [id])
  zone    Zone     @relation(fields: [zoneId], references: [id])
  cameras Camera[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}

// ─────────────────────────────────────────────────────────────────────────────
// IoT Sensors
// ─────────────────────────────────────────────────────────────────────────────
model Sensor {
  id         Int        @id @default(autoincrement())
  tenantId   String
  zoneId     Int
  name       String
  type       SensorType
  ipAddress  String
  macAddress String
  status     String // e.g. online, offline, triggered

  tenant Tenant @relation(fields: [tenantId], references: [id])
  zone   Zone   @relation(fields: [zoneId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}

enum SensorType {
  FIRE
  SMOKE
  PANIC_BUTTON
  MOTION
  DOOR_CONTACT
}

// ─────────────────────────────────────────────────────────────────────────────
// AI Detection Events
// ─────────────────────────────────────────────────────────────────────────────
model AiEvent {
  id          Int           @id @default(autoincrement())
  tenantId    String
  cameraId    Int
  eventType   EventType
  label       String // e.g. recognized name or object
  confidence  Float
  detectedAt  DateTime
  mediaUrl    String // link to snapshot/video clip
  extraData   Json?
  timestamp   DateTime      @default(now())
  description String
  severity    Int           @default(1)
  flagged     FlaggedEvent?
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  camera      Camera        @relation(fields: [cameraId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  updatedBy   String?
}

enum EventType {
  FACE_RECOGNIZED
  FACE_NOT_RECOGNIZED
  FIREARM
  SHARP_OBJECT
  PHONE
  DRUGS
  FIGHT
  LOITERING
  BULLYING
  SNEAKING
  TRUANCY
  STEALING
  EXAM_CHEATING
  VANDALISM
  SMOKING
  CROWDING
  UNIDENTIFIED_PERSON
  CAMERA_OFFLINE
  CAMERA_ONLINE
  SMOKE
  FIRE
  INTRUSION
}

// ─────────────────────────────────────────────────────────────────────────────
// Flagged / Escalated Events
// ─────────────────────────────────────────────────────────────────────────────
model FlaggedEvent {
  id          Int       @id @default(autoincrement())
  eventId     Int       @unique
  flaggedById String // Clerk userId
  reason      String
  reviewed    Boolean   @default(false)
  reviewedAt  DateTime?
  notes       String?

  event AiEvent @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─────────────────────────────────────────────────────────────────────────────
// Gate Entry/Exit Logs
// ─────────────────────────────────────────────────────────────────────────────
model GateEvent {
  id         Int      @id @default(autoincrement())
  tenantId   String
  zoneId     Int
  entityType String // e.g. STUDENT, STAFF, VISITOR, UNKNOWN
  entityId   String? // UUID or string ID
  eventType  String // ENTRY or EXIT
  detectedAt DateTime
  mediaUrl   String?
  extraData  Json?

  tenant Tenant @relation(fields: [tenantId], references: [id])
  zone   Zone   @relation(fields: [zoneId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}

// ─────────────────────────────────────────────────────────────────────────────
// Visitor Records
// ─────────────────────────────────────────────────────────────────────────────
model Visitor {
  id       Int    @id @default(autoincrement())
  tenantId String

  fullName    String
  idNumber    String
  contact     String
  visitReason String
  entryTime   DateTime
  exitTime    DateTime?
  photoUrl    String

  tenant Tenant @relation(fields: [tenantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}

// ─────────────────────────────────────────────────────────────────────────────
// Security Staff (Guards)
// ─────────────────────────────────────────────────────────────────────────────
model Security {
  id       String @id @default(uuid())
  tenantId String

  name     String
  phone    String  @unique
  email    String?
  station  String // e.g. "Main Gate"
  shift    String // e.g. "Day", "Night"
  image    String?
  isActive Boolean @default(true)

  tenant Tenant @relation(fields: [tenantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}

// ─────────────────────────────────────────────────────────────────────────────
// AI Model Versioning
// ─────────────────────────────────────────────────────────────────────────────
model AiModel {
  id         Int      @id @default(autoincrement())
  tenantId   String
  modelName  String
  version    String
  type       String // e.g. FACE, OBJECT, HUMAN_ACTION
  path       String // storage path or URL
  accuracy   Float
  deployedAt DateTime
  notes      String?

  tenant Tenant @relation("TenantToAiModel", fields: [tenantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?
}
